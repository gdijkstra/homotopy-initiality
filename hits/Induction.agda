{-# OPTIONS --without-K #-}

open import hits.Desc

module hits.Induction (desc : Desc) where

open Desc desc

open import Container
open import FreeMonad
open import lib.Basics
open import Alg F‚ÇÄ
open import hits.Alg desc
open import hits.Target desc
open import fam.FreeMonadAlg

module _ (ùì£ : Alg‚ÇÅ) where
  open Alg‚ÇÅ ùì£ renaming (X to T ; Œ∏‚ÇÄ to c‚ÇÄ ; Œ∏‚ÇÅ to c‚ÇÅ)

  open import FreeMonadAlg

  module _
    (B : T ‚Üí Type0)
    (m‚ÇÄ : (x : ‚ü¶ F‚ÇÄ ‚üß‚ÇÄ T) ‚Üí ‚ñ° F‚ÇÄ B x ‚Üí B (c‚ÇÄ x))
    where
    l·µà : (x : ‚ü¶ F‚ÇÅ ‚üß‚ÇÄ T) ‚Üí ‚ñ° F‚ÇÅ B x ‚Üí ‚ñ° (F‚ÇÄ *) B (l ‚Äº x)
    l·µà (s , t) u p* = u (ContainerMorphism.g l s p*)
      
    r·µà : (x : ‚ü¶ F‚ÇÅ ‚üß‚ÇÄ T) ‚Üí ‚ñ° F‚ÇÅ B x ‚Üí ‚ñ° (F‚ÇÄ *) B (r ‚Äº x)
    r·µà (s , t) u p* = u (ContainerMorphism.g r s p*)

    m‚ÇÄ*·µà : (x : ‚ü¶ F‚ÇÄ * ‚üß‚ÇÄ T) ‚Üí ‚ñ° (F‚ÇÄ *) B x ‚Üí B ((c‚ÇÄ *¬π) x)
    m‚ÇÄ*·µà = _,_*·µà {A = T} {B = B} c‚ÇÄ m‚ÇÄ

    record InductionPrinciple

      (m‚ÇÅ : (x : ‚ü¶ F‚ÇÅ ‚üß‚ÇÄ T) (y : ‚ñ° F‚ÇÅ B x) ‚Üí m‚ÇÄ*·µà (l ‚Äº x) (l·µà x y) == m‚ÇÄ*·µà (r ‚Äº x) (r·µà x y) [ B ‚Üì c‚ÇÅ x ])
      : Type1 where
        constructor mk-ind
  
        field
          ind    : (x : T) ‚Üí B x
          ind-Œ≤‚ÇÄ : (x : ‚ü¶ F‚ÇÄ ‚üß‚ÇÄ T)
                 ‚Üí ind (c‚ÇÄ x) == m‚ÇÄ x (‚ñ°-lift F‚ÇÄ ind x)
          -- ind-Œ≤‚ÇÅ : (x : ‚ü¶ F‚ÇÅ ‚üß‚ÇÄ T)
          --        ‚Üí apd ind (c‚ÇÅ x) == {!m‚ÇÅ x ? [ B ‚Üì ? ]!}
