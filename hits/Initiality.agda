{-# OPTIONS --without-K #-}

open import hits.Desc

module hits.Initiality (desc : Desc) where

open Desc desc

open import Container
open import FreeMonad
open import lib.Basics
open import Alg F‚ÇÄ
open import hits.Alg desc
open import hits.Target desc
open import fam.FreeMonadAlg
open import FreeMonadAlg

module _ (ùì£ : Alg‚ÇÅ) where
  open Alg‚ÇÅ ùì£ renaming (X to T ; Œ∏‚ÇÄ to c‚ÇÄ ; Œ∏‚ÇÅ to c‚ÇÅ)

  -- Existence
  module Existence (ùìß : Alg‚ÇÅ) where
    open Alg‚ÇÅ ùìß

    f-B : T ‚Üí Type0
    f-B _ = X

    f-m‚ÇÄ : (x : ‚ü¶ F‚ÇÄ ‚üß‚ÇÄ T) ‚Üí ‚ñ° F‚ÇÄ f-B x ‚Üí X
    f-m‚ÇÄ (s , _) u = Œ∏‚ÇÄ (s , u)

    f-l·µà : (x : ‚ü¶ F‚ÇÅ ‚üß‚ÇÄ T) ‚Üí ‚ñ° F‚ÇÅ f-B x ‚Üí ‚ñ° (F‚ÇÄ *) f-B (l ‚Äº x)
    f-l·µà (s , t) u p* = u (ContainerMorphism.g l s p*)
      
    f-r·µà : (x : ‚ü¶ F‚ÇÅ ‚üß‚ÇÄ T) ‚Üí ‚ñ° F‚ÇÅ f-B x ‚Üí ‚ñ° (F‚ÇÄ *) f-B (r ‚Äº x)
    f-r·µà (s , t) u p* = u (ContainerMorphism.g r s p*)

    f-m‚ÇÄ*·µà : (x : ‚ü¶ F‚ÇÄ * ‚üß‚ÇÄ T) ‚Üí ‚ñ° (F‚ÇÄ *) f-B x ‚Üí f-B ((c‚ÇÄ *¬π) x)
    f-m‚ÇÄ*·µà = _,_*·µà {A = T} {B = f-B} c‚ÇÄ f-m‚ÇÄ


    f-m‚ÇÅ : (x : ‚ü¶ F‚ÇÅ ‚üß‚ÇÄ T) (y : ‚ñ° F‚ÇÅ f-B x) ‚Üí f-m‚ÇÄ*·µà (l ‚Äº x) (f-l·µà x y) == f-m‚ÇÄ*·µà (r ‚Äº x) (f-r·µà x y) [ f-B ‚Üì c‚ÇÅ x ]
    f-m‚ÇÅ (s , _) u = ‚Üì-cst-in {!Œ∏‚ÇÅ (s , u) !}
