{-# OPTIONS --without-K #-}

open import lib.Basics
open import lib.types.Sigma
open import Cat
open import Container
open import 1-hits.Base
open import 1-hits.Alg0

module 1-hits.Alg1 (s : Spec) where

open Spec s

record has-alg‚ÇÅ (X : Type0) : Type0 where
  constructor mk-alg‚ÇÅ
  field
    Œ∏‚ÇÄ : has-alg‚ÇÄ F‚ÇÄ X
    Œ∏‚ÇÅ : (x : ‚ü¶ F‚ÇÅ ‚üß‚ÇÄ X) ‚Üí G‚ÇÅ‚ÇÄ X Œ∏‚ÇÄ x

Alg‚ÇÅ-obj : Type1
Alg‚ÇÅ-obj = Œ£ Type0 has-alg‚ÇÅ

is-alg‚ÇÅ-hom :
  {X Y : Type0}
  (Œ∏ : has-alg‚ÇÅ X)
  (œÅ : has-alg‚ÇÅ Y)
  (f : X ‚Üí Y)
  (f‚ÇÄ : is-alg‚ÇÄ-hom F‚ÇÄ (has-alg‚ÇÅ.Œ∏‚ÇÄ Œ∏) (has-alg‚ÇÅ.Œ∏‚ÇÄ œÅ) f)
  ‚Üí Type0
is-alg‚ÇÅ-hom {X} (mk-alg‚ÇÅ Œ∏‚ÇÄ Œ∏‚ÇÅ) (mk-alg‚ÇÅ œÅ‚ÇÄ œÅ‚ÇÅ) f f‚ÇÄ =
  (x : ‚ü¶ F‚ÇÅ ‚üß‚ÇÄ X) ‚Üí G‚ÇÅ‚ÇÅ Œ∏‚ÇÄ œÅ‚ÇÄ f f‚ÇÄ x (Œ∏‚ÇÅ x) == œÅ‚ÇÅ (‚ü¶ F‚ÇÅ ‚üß‚ÇÅ f x) 

record Alg‚ÇÅ-hom (ùìß ùì® : Alg‚ÇÅ-obj) : Type0 where
  constructor mk-alg‚ÇÅ-hom
  open Œ£ ùìß renaming (fst to X ; snd to Œ∏)
  open Œ£ ùì® renaming (fst to Y ; snd to œÅ)
  
  field
    f : X ‚Üí Y
    f‚ÇÄ : is-alg‚ÇÄ-hom F‚ÇÄ (has-alg‚ÇÅ.Œ∏‚ÇÄ Œ∏) (has-alg‚ÇÅ.Œ∏‚ÇÄ œÅ) f
    f‚ÇÅ : is-alg‚ÇÅ-hom Œ∏ œÅ f f‚ÇÄ

Alg‚ÇÅ-comp :
  {X Y Z : Alg‚ÇÅ-obj}
  ‚Üí Alg‚ÇÅ-hom Y Z
  ‚Üí Alg‚ÇÅ-hom X Y
  ‚Üí Alg‚ÇÅ-hom X Z
Alg‚ÇÅ-comp {X , mk-alg‚ÇÅ Œ∏‚ÇÄ Œ∏‚ÇÅ} {Y , mk-alg‚ÇÅ œÅ‚ÇÄ œÅ‚ÇÅ} {Z , mk-alg‚ÇÅ Œ∂‚ÇÄ Œ∂‚ÇÅ} (mk-alg‚ÇÅ-hom g g‚ÇÄ g‚ÇÅ) (mk-alg‚ÇÅ-hom f f‚ÇÄ f‚ÇÅ)
  = mk-alg‚ÇÅ-hom
     (g ‚àò f)
     (Œª x ‚Üí g‚ÇÄ‚àôf‚ÇÄ x)
     (Œª x ‚Üí G‚ÇÅ‚ÇÅ-comp s Œ∏‚ÇÄ œÅ‚ÇÄ Œ∂‚ÇÄ g f g‚ÇÄ f‚ÇÄ x (Œ∏‚ÇÅ x) ‚àô ap (G‚ÇÅ‚ÇÅ œÅ‚ÇÄ Œ∂‚ÇÄ g g‚ÇÄ (‚ü¶ F‚ÇÅ ‚üß‚ÇÅ f x)) (f‚ÇÅ x) ‚àô g‚ÇÅ (‚ü¶ F‚ÇÅ ‚üß‚ÇÅ f x))
    where
      g‚ÇÄ‚àôf‚ÇÄ : (x : ‚ü¶ F‚ÇÄ ‚üß‚ÇÄ X) ‚Üí (g ‚àò f) (Œ∏‚ÇÄ x) == Œ∂‚ÇÄ (‚ü¶ F‚ÇÄ ‚üß‚ÇÅ (g ‚àò f) x)
      g‚ÇÄ‚àôf‚ÇÄ x = ap g (f‚ÇÄ x) ‚àô g‚ÇÄ (‚ü¶ F‚ÇÄ ‚üß‚ÇÅ f x)

Alg‚ÇÅ-id :
  (X : Alg‚ÇÅ-obj)
  ‚Üí Alg‚ÇÅ-hom X X
Alg‚ÇÅ-id (X , mk-alg‚ÇÅ Œ∏‚ÇÄ Œ∏‚ÇÅ) =
  mk-alg‚ÇÅ-hom (idf X) (Œª x ‚Üí idp) (Œª x ‚Üí G‚ÇÅ‚ÇÅ-id s Œ∏‚ÇÄ x (Œ∏‚ÇÅ x))

Alg‚ÇÅ-left-id :
  {X Y : Alg‚ÇÅ-obj}
  (f : Alg‚ÇÅ-hom X Y)
  ‚Üí Alg‚ÇÅ-comp {X} {Y} {Y} (Alg‚ÇÅ-id Y) f  == f
Alg‚ÇÅ-left-id f = {!!}

Alg‚ÇÅ-right-id :
  {X Y : Alg‚ÇÅ-obj}
  (f : Alg‚ÇÅ-hom X Y)
  ‚Üí Alg‚ÇÅ-comp {X} {X} {Y} f (Alg‚ÇÅ-id X) == f
Alg‚ÇÅ-right-id f = {!!}

Alg‚ÇÅ-assoc :
  {X Y Z W : Alg‚ÇÅ-obj}
  (h : Alg‚ÇÅ-hom Z W)
  (g : Alg‚ÇÅ-hom Y Z)
  (f : Alg‚ÇÅ-hom X Y)
  ‚Üí (Alg‚ÇÅ-comp {X} {Y} {W} (Alg‚ÇÅ-comp {Y} {Z} {W} h g) f) == (Alg‚ÇÅ-comp {X} {Z} {W} h (Alg‚ÇÅ-comp {X} {Y} {Z} g f))
Alg‚ÇÅ-assoc h g f = {!!}

Alg‚ÇÅ : Cat
Alg‚ÇÅ = record
  { obj = Alg‚ÇÅ-obj
  ; hom = Alg‚ÇÅ-hom
  ; comp = Alg‚ÇÅ-comp
  ; id = Alg‚ÇÅ-id
  }

open import General Alg‚ÇÅ

products‚ÇÅ : has-products
products‚ÇÅ = record
  { prod =
      Œª { (X , mk-alg‚ÇÅ Œ∏‚ÇÄ Œ∏‚ÇÅ) (Y , mk-alg‚ÇÅ œÅ‚ÇÄ œÅ‚ÇÅ)
        ‚Üí (X √ó Y)
          , (mk-alg‚ÇÅ (_√ó-alg‚ÇÄ_ F‚ÇÄ Œ∏‚ÇÄ œÅ‚ÇÄ) (Œª x ‚Üí G‚ÇÅ‚ÇÄ-prod s Œ∏‚ÇÄ œÅ‚ÇÄ x (Œ∏‚ÇÅ (‚ü¶ F‚ÇÅ ‚üß‚ÇÅ fst x)) (œÅ‚ÇÅ (‚ü¶ F‚ÇÅ ‚üß‚ÇÅ snd x))))
        }
  ; œÄ‚ÇÅ = mk-alg‚ÇÅ-hom fst (Œª x ‚Üí idp) (Œª x ‚Üí {!!})
  ; œÄ‚ÇÇ = mk-alg‚ÇÅ-hom snd (Œª x ‚Üí idp) {!!}
  }

equalisers‚ÇÅ : has-equalisers
equalisers‚ÇÅ = {!!}
